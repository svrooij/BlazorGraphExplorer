@page "/calendar"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using Microsoft.Graph.Models;
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject Microsoft.AspNetCore.Components.WebAssembly.Authentication.IAccessTokenProvider TokenProvider
@attribute [Authorize]

<h3>Calendar</h3>
<p>This page allows you to put some fake events in your calendar using two ways. Using regular requests on one hand and using batched requests on the other.</p>


<p>
    <label>
        Number of events:
        <input type="number" value="@NumberOfEvents" @onchange="@((ChangeEventArgs __e) => NumberOfEvents = int.Parse(__e.Value?.ToString() ?? "10"))" />
    </label>
</p>

<p>
    <label>
        Event category: 
        <input value="@Catagory"
               @onchange="@((ChangeEventArgs __e) => Catagory = __e?.Value?.ToString())" />
    </label>
</p>
@if(Finished)
{

    <p>Finished adding/deleting events in @TotalMilliseconds?.ToString()ms @if (Deleted.HasValue) { <span>Items deleted @Deleted.Value</span> }</p>
}

<p style="text-align:center">
    <button class="btn btn-secondary" @onclick="AddEvents">Add events</button>
    <button class="btn btn-primary" @onclick="AddEventsUsingBatch">Add events with batch</button>
</p>

<p style="text-align:center">
    <button class="btn btn-outline-danger" @onclick="DeleteEvents">Delete events with category</button>
    <button class="btn btn-danger" @onclick="DeleteEventsWithBatch">Delete events with category (batch)</button>
</p>

@code {
    private int? NumberOfEvents { get; set; } = 10;
    private string? Catagory { get; set; } = "BlazorExplorer";

    private long? TotalMilliseconds { get; set; }
    private bool Finished { get; set; } = false;
    private int? Deleted { get; set; }

    private System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

    private async Task AddEvents()
    {
        Finished = false;
        stopwatch.Reset();
        stopwatch.Stop();
        Deleted = null;
        try
        {
            var events = GenerateEvents(NumberOfEvents ?? 10, Catagory ?? "BlazorExplorer");
            stopwatch.Start();
            foreach(var e in events)
            {
                await GraphServiceClient.Me.Calendar.Events.PostAsync(e);
            }
            stopwatch.Stop();
            TotalMilliseconds = stopwatch.ElapsedMilliseconds;
            Finished = true;
        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }



    }

    private async Task AddEventsUsingBatch()
    {
        Finished = false;
        stopwatch.Reset();
        stopwatch.Stop();
        Deleted = null;
        try
        {
            var events = GenerateEvents(NumberOfEvents ?? 10, Catagory ?? "BlazorExplorer");
            var batch = new BatchRequestContentCollection(GraphServiceClient);
            stopwatch.Start();
            foreach (var e in events)
            {
                await batch.AddBatchRequestStepAsync(GraphServiceClient.Me.Calendar.Events.ToPostRequestInformation(e));
            }
            await GraphServiceClient.Batch.PostAsync(batch);
            stopwatch.Stop();
            TotalMilliseconds = stopwatch.ElapsedMilliseconds;
            Finished = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task DeleteEvents()
    {
        Finished = false;
        stopwatch.Reset();
        stopwatch.Stop();

        var events = await GetEventsWithCategory(Catagory);
        Deleted = events.Count();
        stopwatch.Start();
        foreach(var e in events) {
            await GraphServiceClient.Me.Events[e.Id].DeleteAsync();
        }

        stopwatch.Stop();
        TotalMilliseconds = stopwatch.ElapsedMilliseconds;
        Finished = true;

    }

    private async Task DeleteEventsWithBatch()
    {
        Finished = false;
        stopwatch.Reset();
        stopwatch.Stop();

        var events = await GetEventsWithCategory(Catagory);
        Deleted = events.Count();
        stopwatch.Start();
        var batch = new BatchRequestContentCollection(GraphServiceClient);
        foreach (var e in events)
        {
            await batch.AddBatchRequestStepAsync(GraphServiceClient.Me.Events[e.Id].ToDeleteRequestInformation());
        }
        await GraphServiceClient.Batch.PostAsync(batch);
        stopwatch.Stop();
        TotalMilliseconds = stopwatch.ElapsedMilliseconds;
        Finished = true;

    }

    private static IEnumerable<Event> GenerateEvents(int number, string category)
    {
        var results = new List<Event>();
        var start = DateTime.Now;
        for (int i = 0; i < number; i++)
        {
            results.Add(new Event
                {
                    Body = new ItemBody { Content = "Test event created by batch explorer" },
                    Subject = $"Test event {i}",
                    Categories = new List<string> { category },
                    Start = new DateTimeTimeZone
                    {
                        DateTime = start.AddHours(i).ToString("s"),
                        TimeZone = "Etc/GMT"
                    },
                    End = new DateTimeTimeZone
                    {
                        DateTime = start.AddHours(i + 1).ToString("s"),
                        TimeZone = "Etc/GMT"
                    },
                });
        }
        return results;
    }

    private async Task<IEnumerable<Event>> GetEventsWithCategory(string category)
    {
        var events = await GraphServiceClient.Me.Events.GetAsync((config) =>
        {
            config.QueryParameters.Select = new[] { "id", "subject", "categories", "start", "end" };
            config.QueryParameters.Filter = $"categories/any(c: c eq '{category}')";
            config.QueryParameters.Top = 100;

        });

        return events.Value;
    }
}
